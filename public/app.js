(()=>{"use strict";const t={events:{},on(t,n){const e=Array.isArray(t)?t:[t];for(let t of e)this.events[t]||(this.events[t]=[]),this.events[t].push(n)},emit(t,n){if(this.events[t])for(let e of this.events[t])e(n)}},n={form:null,init(t){this.form=t,t.innerHTML='\n      <div class="row">\n        <div class="col">\n          <label>Nome</label>\n          <input id="name" name="name" class="form-control form-control-sm" />\n        </div>\n        <div class="col">\n          <label>Descrição</label>\n          <input id="description" name="description" class="form-control form-control-sm"/>\n        </div>\n        <div class="col">\n          <label>Conta</label>\n          <input id="account" name="account" class="form-control form-control-sm"/>\n        </div>\n        <div class="col">\n          <label>Data</label>\n          <input id="date" type="date" name="date" class="form-control form-control-sm"/>\n        </div>\n        <div class="col">\n          <label>Valor</label>\n          <input id="value" type="number" name="value" class="form-control form-control-sm"/>\n        </div>\n        <div class="col">\n          <button class="btn btn-primary mt-3">\n            <i class="bi bi-plus"></i>\n            add\n          </button>\n        </div>\n      </div>\n    ',t.addEventListener("submit",n.onSubmit)},onSubmit(t){t.preventDefault();const e=t.target.querySelectorAll("input"),a={};for(let t of e)a[t.name]=t.value||"";n.addEntry(a)},addEntry(e){fetch("entry",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)}).then((()=>{n.clear(),t.emit("newEntry")}))},clear(){const t=this.form.querySelectorAll("input");for(let n of t)n.value=""}},e=n;function a(){return(new Date).toISOString().substring(0,7)}function o(){const t=new Date;return new Date(t.getFullYear(),t.getMonth(),1)}function l(){const t=new Date;return new Date(t.getFullYear(),t.getMonth()+1,0)}function i(t){if(!t)throw new Error("invalid year-month: "+t);const n=new Date(`${t}-1`);return{initialDate:n,endDate:new Date(n.getFullYear(),n.getMonth()+1,0)}}function r(t){return(t||0).toLocaleString("pt-br",{style:"currency",currency:"BRL"})}const c={filter:{month:a(),account:""}},s={init(n){const{initialDate:e,endDate:a}=i(c.filter.month),{account:o}=c.filter;this.getBalance(n,{initialDate:e,endDate:a,account:o}),t.on(["newEntry","deleteEntry","updateEntry","filterChange"],(()=>{const{initialDate:t,endDate:e}=i(c.filter.month),{account:a}=c.filter;this.getBalance(n,{initialDate:t,endDate:e,account:a})}))},getBalance(t,{initialDate:n,endDate:e,account:a}){(function(t,n){const e=Object.keys(n).map((t=>{return`${t}=${e=n[t],e instanceof Date&&(e=e.toISOString().substring(0,10)),String(e)}`;var e})).join("&");return fetch(`${t}?${e}`)})("/entry/balance",{initialDate:n,endDate:e,account:a}).then((t=>t.json())).then((n=>{var e;t.innerHTML=`\n        <div class="d-flex flex-row">\n          <div class="badge bg-light ${e=n.total,(e||0)>0?"text-success":"text-danger"} fs-6">\n            <label class="fw-bold">Total:</label>\n            <span>${r(n.total||0)}</span>\n          </div>\n          <div class="ms-2 badge bg-light text-dark fs-6">\n            <label class="fw-bold">Despesas:</label>\n            <span>${r(n.loss||0)}</span>\n          </div>\n          <div class="ms-2 badge bg-light text-dark fs-6">\n            <label class="fw-bold">Ganhos:</label>\n            <span>${r(n.gain||0)}</span>\n          </div>\n        </div>\n      `}))}},d={async init(n){n.innerHTML='\n      <thead>\n        <tr>\n          <th style="width: 25%">Nome</th>\n          <th style="width: 35%">Descrição</th>\n          <th style="width: 10%">Conta</th>\n          <th style="width: 5%">Data</th>\n          <th style="width: 25%">Valor</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody></tbody>\n    ',this.loadEntries(n,{initialDate:o(),endDate:l(),account:""}),t.on(["newEntry","deleteEntry"],(()=>d.loadEntries(n,{initialDate:o(),endDate:l(),account:""}))),t.on("filterChange",(t=>{const{initialDate:e,endDate:a}=i(t.month),{account:o}=t;this.loadEntries(n,{initialDate:e,endDate:a,account:o})}))},deleteEntry(n){var e;(e=`entry/${n}`,fetch(e,{method:"DELETE"})).then((()=>{t.emit("deleteEntry")}))},async loadEntries(n,{initialDate:e,endDate:a,account:o}){fetch(`entry?initialDate=${e.toISOString().substring(0,10)}&endDate=${a.toISOString().substring(0,10)}&account=${o}`).then((t=>t.json())).then((e=>{const a=n.querySelector("tbody");a.innerHTML=`\n          ${e.map((t=>`\n            <tr>\n              <input type="hidden" name="id" value="${t.id}" />\n              <td>\n                <input name="name" value="${t.name}" class="form-control form-control-sm updateEntry" />\n              </td>\n              <td>\n                <input name="description" value="${t.description}" class="form-control form-control-sm updateEntry" />\n              </td>\n              <td>\n                <input name="account" value="${t.account}" class="form-control form-control-sm updateEntry" />\n              </td>\n              <td>\n                <input type="date" name="date" value="${t.date}" class="form-control form-control-sm updateEntry" />\n              </td>\n              <td>\n                <input name="value" value="${t.value}" class="form-control form-control-sm updateEntry" />\n              </td>\n              <td>\n                <button data-id="${t.id}" class="btn btn-outline-danger btn-sm">\n                  <i class="bi bi-trash2-fill"></i>\n                </button>\n              </td>\n            </tr>\n          `)).join("")} \n        `;for(let t of a.querySelectorAll("button"))t.addEventListener("click",(({target:n})=>{const e=t.dataset.id;confirm("Você confirma exclusão?")&&d.deleteEntry(e)}));for(let n of a.querySelectorAll(".updateEntry"))n.addEventListener("change",(()=>{const e=n.parentElement.parentElement.querySelectorAll("input"),a={};for(let t of e)a[t.name]=(t.value||"").trim();fetch(`entry/${a.id}`,{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(a)}).then((()=>{t.emit("updateEntry")}))}))}))}},u=d,m={init(n){fetch("account").then((t=>t.json())).then((e=>{n.innerHTML=`\n          <div class="row">\n            <div class="col-3">\n              <label>Periodicidade</label>\n              <input id="month" type="month" name="month" value="${c.filter.month}" class="form-control form-control-sm mb-2" />\n            </div>\n            <div class="col-2">\n              <label>Conta</label>\n              <select name="account" value="${c.filter.account}" class="form-control form-control-sm">\n                <option value="">Todos</option>\n                ${e.map((t=>`<option value="${t}">${t}</option>`)).join("")}\n              </select>\n            </div>\n          </div>\n        `;const o=n.querySelector('[name="month"]');o.addEventListener("change",this.onChange),n.querySelector('[name="account"]').addEventListener("change",this.onChange),t.on(["newEntry","deleteEntry"],(()=>o.value=a()))}))},onChange(n){const{name:e,value:a}=n.target;c.filter[e]=a,t.emit("filterChange",c.filter)}},f=document.querySelector("#form_entry");e.init(f);const h=document.querySelector("#table_entries");u.init(h);const y=document.querySelector("#section_balance");s.init(y);const p=document.querySelector("#form_filter");m.init(p)})();