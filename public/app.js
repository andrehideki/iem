(()=>{"use strict";const n={events:{},on(n,t){const e=Array.isArray(n)?n:[n];for(let n of e)this.events[n]||(this.events[n]=[]),this.events[n].push(t)},emit(n,t){if(this.events[n])for(let e of this.events[n])e(t)}},t={form:null,init(n){this.form=n,n.innerHTML='\n      <div class="row">\n        <div class="col">\n          <label>Nome</label>\n          <input id="name" name="name" class="form-control form-control-sm" />\n        </div>\n        <div class="col">\n          <label>Descrição</label>\n          <input id="description" name="description" class="form-control form-control-sm"/>\n        </div>\n        <div class="col">\n          <label>Data</label>\n          <input id="date" type="date" name="date" class="form-control form-control-sm"/>\n        </div>\n        <div class="col">\n          <label>Valor</label>\n          <input id="value" type="number" name="value" class="form-control form-control-sm"/>\n        </div>\n        <div class="col">\n          <button class="btn btn-primary mt-3">\n            <i class="bi bi-plus"></i>\n            add\n          </button>\n        </div>\n      </div>\n    ',n.addEventListener("submit",t.onSubmit)},onSubmit(n){n.preventDefault();const e=n.target.querySelectorAll("input"),i={};for(let n of e)i[n.name]=n.value||"";t.addEntry(i)},addEntry(e){fetch("entry",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)}).then((()=>{t.clear(),n.emit("newEntry")}))},clear(){const n=this.form.querySelectorAll("input");for(let t of n)t.value=""}},e=t;function i(){return new Date}function a(){return(new Date).toISOString().substring(0,7)}function o(){const n=new Date;return new Date(n.getFullYear(),n.getMonth()+1,0)}const l={init(t){this.getBalance(t,{initialDate:i(),endDate:o()}),n.on(["newEntry","deleteEntry"],(()=>this.getBalance(t,{initialDate:i(),endDate:o()})))},getBalance(n,{initialDate:t,endDate:e}){fetch(`/entry/balance?initialDate=${t.toISOString().substring(0,10)}&endDate=${e.toISOString().substring(0,10)}`).then((n=>n.json())).then((t=>{n.innerHTML=`\n        <div>\n          <label>Total</label>\n          <span>${t.total||0}</span>\n        </div>\n        <div>\n          <label>Despesas</label>\n          <span>${t.loss||0}</span>\n        </div>\n        <div>\n          <label>Ganhos</label>\n          <span>${t.gain||0}</span>\n        </div>\n      `}))}},r={async init(t){t.innerHTML='\n      <thead>\n        <tr>\n          <th style="width: 25%">Nome</th>\n          <th style="width: 35%">Descrição</th>\n          <th style="width: 5%">Data</th>\n          <th style="width: 15%">Valor</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody></tbody>\n    ',this.loadEntries(t,{initialDate:i(),endDate:o()}),n.on(["newEntry","deleteEntry"],(()=>r.loadEntries(t,{initialDate:i(),endDate:o()}))),n.on("periodChange",(n=>{const{initialDate:e,endDate:i}=function(n){if(!n)throw new Error("invalid year-month: "+n);const t=new Date(`${n}-1`);return{initialDate:t,endDate:new Date(t.getFullYear(),t.getMonth()+1,0)}}(n);this.loadEntries(t,{initialDate:e,endDate:i})}))},deleteEntry(t){var e;(e=`entry/${t}`,fetch(e,{method:"DELETE"})).then((()=>{n.emit("deleteEntry")}))},async loadEntries(n,{initialDate:t,endDate:e}){fetch(`entry?initialDate=${t.toISOString().substring(0,10)}&endDate=${e.toISOString().substring(0,10)}`).then((n=>n.json())).then((t=>{const e=n.querySelector("tbody");e.innerHTML=`\n          ${t.map((n=>`\n            <tr>\n              <td>\n                <input value="${n.name}" class="form-control form-control-sm" />\n              </td>\n              <td>\n                <input value="${n.description}" class="form-control form-control-sm" />\n              </td>\n              <td>\n                <input type="date" value="${n.date}" class="form-control form-control-sm" />\n              </td>\n              <td>\n                <input value="${n.value}" class="form-control form-control-sm" />\n              </td>\n              <td>\n                <button data-id="${n.id}" class="btn btn-outline-danger btn-sm">\n                  <i class="bi bi-trash"></i>\n                  Excluir\n                </button>\n              </td>\n            </tr>\n          `)).join("")} \n        `;for(let n of e.querySelectorAll("button"))n.addEventListener("click",(({target:n})=>{const t=n.dataset.id;confirm("Você confirma exclusão?")&&r.deleteEntry(t)}))}))}},s=r,c={init(t){t.innerHTML=`\n      <label>\n        <span>Periodicidade</span>\n        <input id="month" type="month" name="month" value="${a()}" class="form-control mb-2" />\n      </label>\n    `;const e=t.querySelector('[name="month"]');e.addEventListener("change",this.onChange),n.on(["newEntry","deleteEntry"],(()=>e.value=a()))},onChange(t){const e=t.target.value;n.emit("periodChange",e)}},d=document.querySelector("#form_entry");e.init(d);const m=document.querySelector("#table_entries");s.init(m);const u=document.querySelector("#section_balance");l.init(u);const h=document.querySelector("#form_filter");c.init(h)})();